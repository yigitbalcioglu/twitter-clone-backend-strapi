{"version":3,"file":"index-au-H75CM.js","sources":["../../admin/src/pages/SettingsPage/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport {\n  Box,\n  Button,\n  ContentLayout,\n  Flex,\n  Grid,\n  GridItem,\n  HeaderLayout,\n  Main,\n  TextInput,\n  ToggleInput,\n  Typography,\n  FieldAction,\n} from '@strapi/design-system';\nimport {\n  Form,\n  LoadingIndicatorPage,\n  useFocusWhenNavigate,\n  translatedErrors,\n  useRBAC,\n} from '@strapi/helper-plugin';\n// Strapi Icons\nimport { Check, Eye as Show, EyeStriked as Hide } from '@strapi/icons';\nimport { Formik } from 'formik';\nimport { useIntl } from 'react-intl';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\n\nimport { PERMISSIONS } from '../../constants';\nimport { useDocumentation } from '../../hooks/useDocumentation';\nimport { getTrad } from '../../utils';\n\nconst schema = yup.object().shape({\n  restrictedAccess: yup.boolean(),\n  password: yup.string().when('restrictedAccess', (value, initSchema) => {\n    return value ? initSchema.required(translatedErrors.required) : initSchema;\n  }),\n});\n\nconst SettingsPage = () => {\n  useFocusWhenNavigate();\n  const { formatMessage } = useIntl();\n  const { submit, data, isLoading } = useDocumentation();\n  const [passwordShown, setPasswordShown] = useState(false);\n  const { allowedActions } = useRBAC(PERMISSIONS);\n\n  const handleUpdateSettingsSubmit = (body) => {\n    submit.mutate({\n      prefix: data?.prefix,\n      body,\n    });\n  };\n\n  return (\n    <Main>\n      {isLoading ? (\n        <LoadingIndicatorPage>Plugin settings are loading</LoadingIndicatorPage>\n      ) : (\n        <Formik\n          initialValues={{\n            restrictedAccess: data?.documentationAccess.restrictedAccess || false,\n            password: '',\n          }}\n          onSubmit={handleUpdateSettingsSubmit}\n          validationSchema={schema}\n        >\n          {({\n            handleSubmit,\n            values,\n            handleChange,\n            errors,\n            setFieldTouched,\n            setFieldValue,\n            dirty,\n          }) => {\n            return (\n              <Form noValidate onSubmit={handleSubmit}>\n                <HeaderLayout\n                  title={formatMessage({\n                    id: getTrad('plugin.name'),\n                    defaultMessage: 'Documentation',\n                  })}\n                  subtitle={formatMessage({\n                    id: getTrad('pages.SettingsPage.header.description'),\n                    defaultMessage: 'Configure the documentation plugin',\n                  })}\n                  primaryAction={\n                    <Button\n                      type=\"submit\"\n                      startIcon={<Check />}\n                      disabled={!dirty && allowedActions.canUpdate}\n                    >\n                      {formatMessage({\n                        id: getTrad('pages.SettingsPage.Button.save'),\n                        defaultMessage: 'Save',\n                      })}\n                    </Button>\n                  }\n                />\n                <ContentLayout>\n                  <Box\n                    background=\"neutral0\"\n                    hasRadius\n                    shadow=\"filterShadow\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    paddingLeft={7}\n                    paddingRight={7}\n                  >\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Typography variant=\"delta\" as=\"h2\">\n                        {formatMessage({\n                          id: 'global.settings',\n                          defaultMessage: 'Settings',\n                        })}\n                      </Typography>\n                      <Grid gap={4}>\n                        <GridItem col={6} s={12}>\n                          <ToggleInput\n                            name=\"restrictedAccess\"\n                            label={formatMessage({\n                              id: getTrad('pages.SettingsPage.toggle.label'),\n                              defaultMessage: 'Restricted Access',\n                            })}\n                            hint={formatMessage({\n                              id: getTrad('pages.SettingsPage.toggle.hint'),\n                              defaultMessage: 'Make the documentation endpoint private',\n                            })}\n                            checked={values.restrictedAccess}\n                            onChange={() => {\n                              if (values.restrictedAccess === true) {\n                                setFieldValue('password', '', false);\n                                setFieldTouched('password', false, false);\n                              }\n\n                              setFieldValue('restrictedAccess', !values.restrictedAccess, false);\n                            }}\n                            onLabel=\"On\"\n                            offLabel=\"Off\"\n                          />\n                        </GridItem>\n                        {values.restrictedAccess && (\n                          <GridItem col={6} s={12}>\n                            <TextInput\n                              label={formatMessage({\n                                id: 'global.password',\n                                defaultMessage: 'Password',\n                              })}\n                              name=\"password\"\n                              placeholder=\"**********\"\n                              type={passwordShown ? 'text' : 'password'}\n                              value={values.password}\n                              onChange={handleChange}\n                              error={\n                                errors.password\n                                  ? formatMessage({\n                                      id: errors.password,\n                                      defaultMessage: 'Invalid value',\n                                    })\n                                  : null\n                              }\n                              endAction={\n                                <FieldActionWrapper\n                                  onClick={(e) => {\n                                    e.stopPropagation();\n                                    setPasswordShown((prev) => !prev);\n                                  }}\n                                  label={formatMessage(\n                                    passwordShown\n                                      ? {\n                                          id: 'Auth.form.password.show-password',\n                                          defaultMessage: 'Show password',\n                                        }\n                                      : {\n                                          id: 'Auth.form.password.hide-password',\n                                          defaultMessage: 'Hide password',\n                                        }\n                                  )}\n                                >\n                                  {passwordShown ? <Show /> : <Hide />}\n                                </FieldActionWrapper>\n                              }\n                            />\n                          </GridItem>\n                        )}\n                      </Grid>\n                    </Flex>\n                  </Box>\n                </ContentLayout>\n              </Form>\n            );\n          }}\n        </Formik>\n      )}\n    </Main>\n  );\n};\n\nconst FieldActionWrapper = styled(FieldAction)`\n  svg {\n    height: 1rem;\n    width: 1rem;\n    path {\n      fill: ${({ theme }) => theme.colors.neutral600};\n    }\n  }\n`;\n\nexport default SettingsPage;\n"],"names":["yup","translatedErrors","useFocusWhenNavigate","useIntl","useDocumentation","useState","useRBAC","PERMISSIONS","Main","jsx","LoadingIndicatorPage","Formik","jsxs","Form","HeaderLayout","getTrad","Button","Check","ContentLayout","Box","Flex","Typography","Grid","GridItem","ToggleInput","TextInput","Show","Hide","styled","FieldAction"],"mappings":"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"}